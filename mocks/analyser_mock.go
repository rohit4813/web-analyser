// Code generated by MockGen. DO NOT EDIT.
// Source: api/backend/analyser/analyser.go
//
// Generated by this command:
//
//	mockgen -source=api/backend/analyser/analyser.go -destination=mocks/analyser_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	url "net/url"
	reflect "reflect"
	analyser "web-analyser/api/backend/analyser"

	gomock "go.uber.org/mock/gomock"
)

// MockAnalyser is a mock of Analyser interface.
type MockAnalyser struct {
	ctrl     *gomock.Controller
	recorder *MockAnalyserMockRecorder
}

// MockAnalyserMockRecorder is the mock recorder for MockAnalyser.
type MockAnalyserMockRecorder struct {
	mock *MockAnalyser
}

// NewMockAnalyser creates a new mock instance.
func NewMockAnalyser(ctrl *gomock.Controller) *MockAnalyser {
	mock := &MockAnalyser{ctrl: ctrl}
	mock.recorder = &MockAnalyserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAnalyser) EXPECT() *MockAnalyserMockRecorder {
	return m.recorder
}

// Analyse mocks base method.
func (m *MockAnalyser) Analyse(url *url.URL) (*analyser.Summary, error, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Analyse", url)
	ret0, _ := ret[0].(*analyser.Summary)
	ret1, _ := ret[1].(error)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// Analyse indicates an expected call of Analyse.
func (mr *MockAnalyserMockRecorder) Analyse(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Analyse", reflect.TypeOf((*MockAnalyser)(nil).Analyse), url)
}
